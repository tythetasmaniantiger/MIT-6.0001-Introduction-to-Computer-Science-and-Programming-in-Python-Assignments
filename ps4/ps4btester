#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar  1 21:04:47 2022

@author: gregoryarps
"""


import string


def load_words(file_name):
    '''
    file_name (string): the name of the file containing 
    the list of words to load    
    
    Returns: a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    '''
    print("Loading word list from file...")
    # inFile: file
    inFile = open(file_name, 'r')
    # wordlist: list of strings
    wordlist = []
    for line in inFile:
        wordlist.extend([word.lower() for word in line.split(' ')])
    print("  ", len(wordlist), "words loaded.")
    return wordlist

def is_word(word_list, word):
    '''
    Determines if word is a valid word, ignoring
    capitalization and punctuation

    word_list (list): list of words in the dictionary.
    word (string): a possible word.
    
    Returns: True if word is in word_list, False otherwise

    Example:
    >>> is_word(word_list, 'bat') returns
    True
    >>> is_word(word_list, 'asdf') returns
    False
    '''
    word = word.lower()
    word = word.strip(" !@#$%^&*()-_+={}[]|\:;'<>?,./\"")
    return word in word_list

def get_story_string():
    """
    Returns: a story in encrypted text.
    """
    f = open("story.txt", "r")
    story = str(f.read())
    f.close()
    return story


WORDLIST_FILENAME = 'words.txt'
valid_words = load_words(WORDLIST_FILENAME)


def build_shift_dict(shift):
      '''
      Creates a dictionary that can be used to apply a cipher to a letter.
      The dictionary maps every uppercase and lowercase letter to a
      character shifted down the alphabet by the input shift. The dictionary
      should have 52 keys of all the uppercase letters and all the lowercase
      letters only.        
      
      shift (integer): the amount by which to shift every letter of the 
      alphabet. 0 <= shift < 26

      Returns: a dictionary mapping a letter (string) to 
               another letter (string). 
      '''
      assert shift <= 26, "invalid shift value"
      assert type(shift) == int, "shift must be type: int"
      
      let = string.ascii_lowercase[shift:] + string.ascii_lowercase[:shift]
      values = list(let + let.upper())
      shift_dict = dict(zip(string.ascii_letters, values))
      shift_dict[" "] = " "
      return shift_dict

  
def apply_shift(message, shift):
     '''
     Applies the Caesar Cipher to self.message_text with the input shift.
     Creates a new string that is self.message_text shifted down the
     alphabet by some number of characters determined by the input shift        
     
     shift (integer): the shift with which to encrypt the message.
     0 <= shift < 26

     Returns: the message text (string) in which every character is shifted
          down the alphabet by the input shift
     '''
     shift_dict = build_shift_dict(shift)
     shifted_word = ""
     for char in message:
             shifted_word += shift_dict[char]
     
     return shifted_word[0:]
 

def decrypt_message(message):
    '''
    Decrypt self.message_text by trying every possible shift value
    and find the "best" one. We will define "best" as the shift that
    creates the maximum number of real words when we use apply_shift(shift)
    on the message text. If s is the original shift value used to encrypt
    the message, then we would expect 26 - s to be the best shift value 
    for decrypting it.

    Note: if multiple shifts are equally good such that they all create 
    the maximum number of valid words, you may choose any of those shifts 
    (and their corresponding decrypted messages) to return

    Returns: a tuple of the best shift value used to decrypt the message
    and the decrypted message text using that shift value
    '''
    shift_scores = []
    for k in range(26):
        shift_scores.append(0) 
        decrypt = apply_shift(message, 26 - k)
        words = decrypt.split(" ")
        for elt in words:
            if is_word(valid_words, elt):
                shift_scores[k] += 1
    
    real_shift = shift_scores.index(max(shift_scores))
    return (real_shift, apply_shift(message, 26 - real_shift)) 

ben = "ah yes my monkey booze I think I shall partake"
encryben = apply_shift(ben,1)
decryben = decrypt_message(encryben)

print(ben)
print(encryben)
print(decryben)